invert <- function(perm) {
n <- perm[1]
perm[n+1:length(perm)] -> tail
perm[n:1] -> head
append(head, tail)
}
perm <- c(3,4,2,1,5)
invert(perm)
invert <- function(perm) {
n <- perm[1]
perm[(n+1):length(perm)] -> tail
perm[n:1] -> head
append(head, tail)
}
perm <- c(3,4,2,1,5)
invert(perm)
perm <- c(3,4,2,1,5)
num.iter = 0
max.iter = 5000
solve <- function (perm, max.iter) {
num.iter = 0
while ((perm[1] != 1) & (num.iter <= max.iter)) {
invert(perm) -> perm
num.iter + 1 -> num.iter
}
if (perm[1] == 1) {
num.iter
} else {
cat("reach maximum number of iterations", max.iter, "\n")
}
}
solve(perm, max.iter=10)
library("e1071")
permutations(5) -> permutations
permutations[1, ]
solve <- function (perm, max.iter) {
num.iter = 0
while ((perm[1] != 1) & (num.iter <= max.iter)) {
invert(perm) -> perm
num.iter + 1 -> num.iter
}
if (perm[1] == 1) {
num.iter
} else {
cat("passed maximum number of iterations", max.iter, "\n")
num.iter
}
}
library("plyr")
num.iter.for.perm <- laply(1:nrow(permutations), function(row) {solve(permutations[row, ])},
.progress="time")
num.iter.for.perm <- laply(1:nrow(permutations), function(row) {
solve(permutations[row, ], max.iter)
},.progress="time")
max(num.iter.for.perm)
res <- ldply(1:nrow(permutations), function(row) {
solve(permutations[row, ], max.iter) -> num.iter
data.frame("idx" = row, "num.iter" = num.iter)
},.progress="time")
list(perm=permutations[res$idx[which.max(res$num.iter)]], max.num.iter = max(res$num.iter))
list(perm=permutations[res$idx[which.max(res$num.iter)], ], max.num.iter = max(res$num.iter))
permutations(10) -> permutations
permutations(8) -> permutations
res <- ldply(1:nrow(permutations), function(row) {
solve(permutations[row, ], max.iter) -> num.iter
data.frame("idx" = row, "num.iter" = num.iter)
},.progress="time")
list(perm=permutations[res$idx[which.max(res$num.iter)], ], max.num.iter = max(res$num.iter))
permutations(9) -> permutations
res <- ldply(1:nrow(permutations), function(row) {
solve(permutations[row, ], max.iter) -> num.iter
data.frame("idx" = row, "num.iter" = num.iter)
},.progress="time")
res <- ldply(1:10^6, function(row) {
solve(permutations[row, ], max.iter) -> num.iter
data.frame("idx" = row, "num.iter" = num.iter)
},.progress="time")
res <- ldply(1:(10^6), function(row) {
solve(permutations[row, ], max.iter) -> num.iter
data.frame("idx" = row, "num.iter" = num.iter)
},.progress="time")
res <- ldply(1:nrow(permutations), function(row) {
solve(permutations[row, ], max.iter) -> num.iter
data.frame("idx" = row, "num.iter" = num.iter)
},.progress="time")
res <- ldply(1:10^5, function(row) {
solve(permutations[row, ], max.iter) -> num.iter
data.frame("idx" = row, "num.iter" = num.iter)
},.progress="time")
list(perm=permutations[res$idx[which.max(res$num.iter)], ], max.num.iter = max(res$num.iter))
sample(1:nrow(permutations), 10^5) -> ridx
res <- ldply(ridx, function(row) {
solve(permutations[row, ], max.iter) -> num.iter
data.frame("idx" = row, "num.iter" = num.iter)
},.progress="time")
list(perm=permutations[res$idx[which.max(res$num.iter)], ], max.num.iter = max(res$num.iter))
sample(1:nrow(permutations), 3*10^5) -> ridx
res <- ldply(ridx, function(row) {
solve(permutations[row, ], max.iter) -> num.iter
data.frame("idx" = row, "num.iter" = num.iter)
},.progress="time")
sample(1:nrow(permutations), 2*10^5) -> ridx
res <- ldply(ridx, function(row) {
solve(permutations[row, ], max.iter) -> num.iter
data.frame("idx" = row, "num.iter" = num.iter)
},.progress="time")
